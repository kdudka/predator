#!/bin/bash
export SELF="$0"

# this makes 7x speedup in case 'grep' was compiled with multi-byte support
export LC_ALL=C

# Disable ccache so that GCC really processes the files
export CCACHE_DISABLE=1

# Allocation of file descriptors. Pay attention not to interfere with them!!
FD_UCODE=3
FD_TRACE=4
FD_TRACE_UCODE=5
FD_ORIG_CODE=6

# Outputs - defaults to standard streams
OUT_UCODE='&1'
OUT_TRACE='&1'
OUT_TRACE_UCODE='&1'
OUT_ORIG_CODE='&1'

usage() {
  echo "Usage: $SELF [OPTION]... FILE"
  echo "Try '$SELF --help' for more information."
  exit 1
}

usage_long() {
  # 80 output chars:
  #    "################################################################################"
  echo "Usage: $SELF [OPTION]... FILE"
  echo ""
  echo "Miscellaneous:"
  echo "  -p,   --print-ucode              print microcode"
  echo "  -po,  --print-orig-code          prints the input code after GCC processing"
  echo "  -c,   --compile-only             only compile, do not run the analysis"
  echo "  -t,   --print-trace              print the trace for detected errors"
  echo "  -tu,  --print-trace-ucode        print the microcode trace for detected errors"
  echo "  -op,  --output-ucode       FILE  write the output microcode (for -p) to FILE"
  echo "  -opo, --output-orig-code   FILE  write the input code (for -po) to FILE"
  echo "  -ot,  --output-trace       FILE  write the trace (for -t) to FILE"
  echo "  -otu, --output-trace-ucode FILE  write the microcode trace (for -tu) to FILE"
  echo "  -d,   --dry-run                  do not run, only print the final command"
  echo "  -v,   --verbose                  increase verbosity level"
  echo "  -h,   --help                     display this help and exit"
  #    "################################################################################"

  exit 1
}

seek_input_file() {
  test -f "$1" && return 0

  return 1
}

remove_gcc_varnames() {
	echo "$1" | \
	eval "awk '                                                                    \
	/#[0-9]+:/ {                                                                   \
		str = \$0;                                                                   \
		while (match(str, /#[0-9]+:/))                                               \
		{                                                                            \
			str = substr(str, 1, RSTART-1)  substr(str, RSTART+RLENGTH, length(\$0));  \
			sub(/\/\//, \"      //\", str);                                            \
		}                                                                            \
	                                                                               \
		print str;                                                                   \
		next;                                                                        \
	}                                                                              \
	                                                                               \
	{print}'"
}

check_present() {
  if [ "$1" == "" ] ; then
    echo "Invalid call of check_present()"
    exit 1
  fi

  if [ "$2" == "" ] ; then
    echo "Parameter '$1' needs an attribute! See '${SELF} -h' for help."
    exit 1
  fi
}

FILENAME=
FA_ARGS=
FA_VERBOSE=0
DRY_RUN=0

while [ "$1" != "" ]; do
  case $1 in
    -p   | --print-ucode )          FA_ARGS="${FA_ARGS};print-ucode"
                                    ;;
    -po  | --print-orig-code )      FA_ARGS="${FA_ARGS};print-orig-code"
                                    ;;
    -c   | --compile-only )         FA_ARGS="${FA_ARGS};only-compile"
                                    ;;
    -t   | --print-trace )          FA_ARGS="${FA_ARGS};print-trace"
                                    ;;
    -tu  | --print-trace-ucode )    FA_ARGS="${FA_ARGS};print-ucode-trace"
                                    ;;
    -op  | --output-ucode )         check_present $1 $2
                                    shift
                                    OUT_UCODE=$1
                                    ;;
    -opo | --output-orig-code )     check_present $1 $2
                                    shift
                                    OUT_ORIG_CODE=$1
                                    ;;
    -ot  | --output-trace )         check_present $1 $2
                                    shift
                                    OUT_TRACE=$1
                                    ;;
    -otu | --output-trace-ucode )   check_present $1 $2
                                    shift
                                    OUT_TRACE_UCODE=$1
                                    ;;
    -d   | --dry-run )              DRY_RUN=1
                                    ;;
    -v   | --verbose )              FA_VERBOSE=$(expr ${FA_VERBOSE} + 1)
                                    ;;
    -h   | --help )                 usage_long
                                    ;;
    * )                             if [ "$FILENAME" = "" ]
                                    then
                                      FILENAME=$1
                                    else
                                      echo "Multiple input files provided: \"${FILENAME}\" and \"$1\"!"
                                      usage
                                    fi
  esac
  shift
done

test "$FILENAME" = "" && {
  echo "Missing source file name!"
  usage ;
}

seek_input_file "$FILENAME" || {
  echo "File \""$FILENAME"\" is not a regular file!"
  usage ;
}

# include common code base
topdir="`dirname "$(readlink -f "$SELF")"`/.."
source "$topdir/build-aux/xlib.sh"

# basic setup
export SINK="/dev/null"
export FA_PLUG="$topdir/fa_build/libfa.so"
export GCC_HOST='@GCC_HOST@'
export GCC_OPTS="-S -o $SINK -O0 -m32 -I$topdir/include/forester-builtins -DFORESTER"

# initial checks
find_gcc_host
find_plug FA_PLUG fa Forester

# use verbose level 0 by default
test -z "$FA_VERBOSE" && FA_VERBOSE=0

if [ "$FA_VERBOSE" -ge "1" ]; then
  # use pp code listener by default
  test -z "$FA_OPTS" && FA_OPTS="-fplugin-arg-libfa-dump-pp -fplugin-arg-libfa-dump-types"
fi;

# check whether stdout is connected to a terminal
if tty 0>&1 >"$SINK"; then
    # initialize coloring escape sequences
    export S='\o033[1;30m'
    export R='\o033[1;31m'
    export G='\o033[1;32m'
    export Y='\o033[1;33m'
    export B='\o033[1;34m'
    export W='\o033[1;37m'
    export N='\o033[0m'
fi

# cleaning on exit 
on_exit() {
	rm -f "$tmp"
	rm -f "$tmp_trace"
}

trap on_exit EXIT

# the GCC command
exec_gcc() {
	GCC_ARGS=$1
	REDIR=$2

	EXEC_STR="$GCC_HOST $GCC_OPTS                                     \
	      ${GCC_ARGS}                                                 \
        -fplugin="$FA_PLUG"                                         \
        $FA_OPTS                                                    \
        -fplugin-arg-libfa-verbose="$FA_VERBOSE"                    \
        -fplugin-arg-libfa-args=\"$FA_ARGS\"                        \
				${REDIR}                                                    \
				"

  if [ ${DRY_RUN} == 0 ] ; then
		eval ${EXEC_STR}
  else
    echo ${EXEC_STR}
  fi
}

# run the gcc
run_gcc() {
    printf "Trying to compile \033[1;37m%s\033[0m ... " "$*" >&2
    tmp="$(mktemp)"
    test -w "$tmp" || die "mktemp failed"

    if "$GCC_HOST" $GCC_OPTS "$@" > "$tmp" 2>&1; then
        printf "\033[1;32mOK\033[0m\n" >&2
        cat "$tmp" >&2
        printf "Running \033[1;34mForester\033[0m ...\n" >&2
    else
        printf "\033[1;31mFAILED\033[0m\n\n" >&2
        cat "$tmp"
        return 1
    fi

    RETURN="-1"

		tmp_trace="$(mktemp)"
    test -w "$tmp_trace" || die "mktemp failed"

		tmp_orig_code="$(mktemp)"
    test -w "$tmp_orig_code" || die "mktemp failed"

    # swap stdout and stderr and set outputs for other FDs
		exec_gcc "$@" "{FD_TMP}>&1                          \
			             1>&2                                 \
									 2>&\${FD_TMP}                        \
									 ${FD_TRACE}>${tmp_trace}             \
									 ${FD_TRACE_UCODE}>${OUT_TRACE_UCODE} \
									 ${FD_UCODE}>${OUT_UCODE}             \
                   ${FD_ORIG_CODE}>${tmp_orig_code}     \
									"
		RETURN="$?"

    eval remove_gcc_varnames "\"\$(cat ${tmp_trace})\" >${OUT_TRACE}"
    rm ${tmp_trace}

    eval remove_gcc_varnames "\"\$(cat ${tmp_orig_code})\" >${OUT_ORIG_CODE}"
    rm ${tmp_orig_code}

    if [ ${RETURN} -ne 0 ]; then
        printf "\033[1;31mFAILED\033[0m\n" >&2
    fi
}

run_gcc ${FILENAME} |                                                          \
        stdbuf --output=L sed -re 's| \[-fplugin=libfa\.so\]$||'               \
        -e "s|(^.*) \[internal location\]\$|$S\1$N|"                           \
        -e "s|(: error:) (.*)\$|\1 $R\2$N|"                                    \
        -e "s|(: warning:) (.*)\$|\1 $Y\2$N|"                                  \
        -e "s|(: note:) (.*)\$|\1 $G\2$N|"                                     \
        -e "s|(current memory usage: *) ([0-9.]+ MB)|\1 $B\2$N|"               \
        -e "s|(peak memory usage: *) ([0-9.]+ MB)|\1 $R\2$N|"                  \
        -e "s|(!!! executing insn #[0-9]+ ...) (.*)\$|\1 $G\2$N|"              \
        -e "s|(variable[:]? #[0-9]+:)([a-zA-Z0-9_.]+)|\1$G\2$N|"               \
        -e "s|(per target) (L[0-9]+)|\1 $G\2$N|"                               \
        -e "s|(initial size of state was) ([0-9]+)|\1 $W\2$N|"                 \
        -e "s|(#[0-9]+)|$W\1$N|"                                               \
        -e "s|(block L[0-9]+) (in progress)|\1 $Y\2$G|"                        \
        -e "s|(... while executing) (.*\\(\\))|\1 $Y\2$N|"                     \
        -e "s|took ([0-9.]+ s)|took $R\1$N|"                                   \
        -e "s|(ignoring call of undefined function:) (.*)\$|\1 $R\2$N|"        \
        -e "s|(internal compiler error:) (.*)\$|\1 $R\2$N|"                    \
        -e "s|(undefined symbol:) (.*)\$|\1 $R\2$N|"                           \
        -e "s/(CL_BREAK_IF|INT3|SIGTRAP)/$R\1$N/"                              \
        -e "s/(: debug: *) ([<>]J[<>]|AAA)/\1 $R\2$N/"                         \
        -e "s/(: debug:) \\(x\\) (.*)\$/\1 $Y(x)$N \2/"                        \
        -e "s/(: debug:) (<<<|>>>)/\1 $B\2$N/"                                 \
        -e "s/(: debug:) (XXX)/\1 $Y\2$N/"                                     \
        -e "s/(: debug: ___) (entering|we are)/\1 $G___$N \2/"

exit ${RETURN}

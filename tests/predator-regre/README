SLS abstraction
===============

    test-0001.c - infinite loop creating a SLL
                - it plots a heap graph per each iteration

                - thanks to the SLS abstraction, the program reaches its end
                  during the symbolic execution (though it can't happen in real
                  world as long as there is some memory available)

                - junk is properly detected since there is some memory
                  allocated, but nothing is free'd afterwards

    test-0015.c - creation/destruction of a cyclic SLL

    test-0038.c - simple SLL creation/destruction
                - one false alarm caused by the poor support of integral values
                - contributed by Petr Peringer

    test-0047.c - SLL creation, starting with uninitialized list pointer
                - because of the injected bug, it has to explore two times more
                  states

                - plots two heap graphs per each iteration (two variants
                  considered because of the uninitialized value mentioned above)

    test-0048.c - handling of shared/existential values during the abstraction

    test-0049.c - abstraction of SLL, each node contains a pointer to head
                - a few mistakes have been done in the test
                - see test-0118.c for the sane variant of this test

    test-0050.c - simple visualization of SLS abstraction in progress

    test-0051.c - SLS, each item owns its own on heap allocated object

    test-0052.c - regression test for SLS discovery (struct nesting, etc.)

    test-0053.c - SLS creation/destruction
                - a memory leak injected into the SLL destruction routine
                - can be turned into a leak-less example by the '#if 0' inside

    test-0065.c - SLL reversion with an ordering check
                - contributed by Tomas Vojnar

    test-0083.c - an example taken from fa_analysis
                - seen infinite because we abstract out integral values
                - it ignores the OOM state
                - no flaws reported with -fplugin-arg-libsl-symexec-args=fast

    test-0106.c - pseudo tree consisting of two SLLs
                - known to work with SE_COST1_LEN_THR == 4

    test-0112.c - hello-world, once used as the most trivial example for symjoin

    test-0113.c - error-free variant of test-0106
                - known to work with SE_COST1_LEN_THR == 4

    test-0118.c - abstraction of SLL, each node contains a pointer to head
                - improved variant of test-0049

    test-0119.c - a demo created as simplification of test-0118
                - tons of OOM errors
                - run with -fplugin-arg-libsl-symexec-args=fast
                - plots self-explaining heap graphs with DEBUG_SYMABSTRACT == 1

    test-0149.c - alternation of test-0052, which uses calloc instead of malloc

    test-0176.c - a possibly infinite SLL where nodes are just void pointers

    test-0193.c - a trivial example on use of joinData(), once used as a demo

    test-0194.c - a trivial example on use of joinData(), once used as a demo

    test-0195.c - a simplification of test-0193 that revealed a bug in symjoin

    test-0199.c - a stack implementation (contributed by Daniela Ďuričeková)


DLS abstraction
===============

    test-0054.c - simple DLL creation
                - seen infinite because we abstract out integral values
                - the fix-point calculation terminates thanks to DLS abstraction

    test-0055.c - a regression test focused on DLS discovery

    test-0056.c - a regression test focused on DLS shared data

    test-0057.c - concretization of DLS
                - it creates a (possibly infinite) DLL
                - the abstraction is triggered
                - the list is traversed from its one end to its other end
                  (concretization/abstraction)

    test-0058.c - alternation of test-0057.c
                - it creates a DLL of fixed length, though long enough to
                  trigger the DLS abstraction

                - as there is less non-determinism, it produces fewer graphs

    test-0059.c - forward/backward destruction of DLL

    test-0060.c - DLS abstraction of a cyclic DLL

    test-0068.c - a regression test focused on DLS discovery/abstraction

    test-0069.c - a regression test focused on handling of 1+/2+ DLS

    test-0082.c - a.k.a. jonathan-DLL.c
                - an example provided by Jonathan Cederberg
                - seen infinite because we abstract out integral values
                - does not care about the OOM state, what makes our analysis
                  a bit complex

                - works better with -fplugin-arg-libsl-symexec-args=fast

    test-0170.c - a NULL-terminated DLL with pointers to begin, end, and cursor
                - in order to not report artificial junk, needs to splice-out a
                  chain of DLS

    test-0171.c - a modification of test-0170 that revealed a nasty bug

    test-0214.c - randomly append/remove items from begin/end of the list

    test-0217.c - extension of test-0214 using a random seek in random direction

    test-0218.c - simplification of test-0217 not using structs at all


Higher level SLS/DLS abstraction, etc.
======================================

    test-0061.c - conversion of SLL to DLL and vice versa
                    1. creates a singly-linked list, using the 'next' selector
                       for biding

                    2. goes through the list and completes the missing values
                       of 'prev' selector, in order to obtain a doubly-linked
                       list

                    3. goes through the list and zero the 'next' selector
                       of each node, in order to get a reversed singly-linked
                       list

    test-0062.c - SLS nesting
                - a (possibly infinite) SLL
                - each node points to a standalone (possibly infinite) SLL

    test-0063.c - SLS of SLSs at end of another SLS
                - connected through incompatible pointer conversion
                - plots some heap graphs that explain a lot
                - mind the [prototype] prefix used in the SLS node visualization

    test-0064.c - more excessive test for SLS nesting and connecting

    test-0066.c - SLS of DLSs
                - a (possibly infinite) SLL
                - each node points to a standalone (possibly infinite) DLL

    test-0067.c - test-0066.c extended of two step destruction
                    1. the nested DLLs are destroyed
                    2. the master SLL is destroyed

    test-0070.c - distinguish among shared/prototype objects

    test-0071.c - SLL, each node points to a shared SLL

    test-0072.c - DLL, each node points to a standalone DLL
                - indirect function call (not so synthetic use case here)
                - bounded recursion of depth 2
                - see the function dll_create_generic() for details

    test-0110.c - top level SLL
                - odd nodes contain only one item of nested SLL (not a SLL)
                - even nodes contain two items of nested SLL
                - the same type is used at both levels, which helps negligibly

    test-0111.c - alternation of test-0110
                - two distinct types are used, which makes it harder to digest

    test-0116.c - alternation of test-0111
                - length of the nested SLL changes periodically: 1, 3, 0, 2
                - no way to analyse without three-way join of prototypes

    test-0117.c - error-free variant of test-0116 (only a destructor added)

    test-0124.c - merge-sort operating on two level SLL

    test-0127.c - SLL, each item contains random length sublist of length >=0

    test-0128.c - SLL, each item contains zero or one nested item

    test-0129.c - alternation of test-0127 with DLLs instead of SLLs

    test-0130.c - alternation of test-0128 with DLLs instead of SLLs

    test-0157.c - alternation of test-0124, all functions are manually unfolded
                - contributed by Tomas Vojnar

    test-0167.c - state explosion minimal example taken from test-0124

    test-0168.c - yet another modification of test-0124

    test-0177.c - test-0168 extended by explicit checks of certain shape props

    test-0178.c - test-0177 with an injected programming mistake

    test-0181.c - test-0072 extended by explicit checks of certain shape props

    test-0182.c - test-0181 with an injected programming mistake

    test-0183.c - test-0061 extended by explicit checks of certain shape props

    test-0184.c - test-0183 with an injected programming mistake

    test-0191.c - an easy test for joinSymHeaps(), once used as a demo

    test-0192.c - modified test-0191, works with SE_ALLOW_THREE_WAY_JOIN == 3

    test-0207.c - var killer benchmark (merge of test-0168 and test-0177)

    test-0219.c - explains why we need to track level for layered prototypes

    test-0220.c - tricky white-box test focused on dealing with L2 prototypes

    test-0221.c - regression test covering a fixed bug in cloning of prototypes

    test-0225.c - tricky white-box test focused on leaking shared data

    test-0226.c - tiny modification of test-0225 that worked even before the fix

    test-0227.c - leak-less variant of test-0225

    test-0228.c - leak-less variant of test-0226

    test-0229.c - non-artificial variant of test-0225.c

    test-0230.c - non-artificial variant of test-0227.c

    test-0231.c - test-0229 forced to create SLS 0+ prior to entering the loop

    test-0232.c - merge of test-0230 and test-0231 resulting in double free

    test-0233.c - leak-less variant of test-0231

    test-0234.c - hierarchically nested SLS up to L5, properly destroyed

    test-0235.c - hierarchically nested SLS up to L5, bottom-up destructor

    test-0236.c - test-0234 with some direct up-links on top of it

    test-0237.c - test-0236 but also with some indirect up-links


Linux lists
===========

    test-0073.c - playing with some macros from <linux/list.h>
                - no abstraction involved
                - the heap graphs should be self-explaining

    test-0075.c - off-values handling, aliasing of the 1st field with the root
                - see the checks inside and the generated graph for more info

    test-0076.c - another test/example focused on off-values handling

    test-0077b.c- a successfully caught wrong usage of an off-value

    test-0078.c - abstraction of Linux like DLL
                - operating on real macros taken from <linux/list.h>
                - the heap graphs explain how it works

    test-0079.c - simplified variant of test-0078.c
                - useful mainly for debugging purposes

    test-0080.c - Linux lists reduced to SLLs
                - traversal of the abstracted list

    test-0081.c - traversal of Linux like DLL
                - abstraction/concretization
                - some macros were expanded in order to make the code clear

    test-0084.c - destruction of Linux like DLL
                - the example itself is written a bit awkward, but works
                - successfully analyzed

    test-0085.c - regression test focused on aliasing of a field with the root
                - test for address comparison and call of free()
                - some of the tests are a bit crazy, however being used in
                  handling of Linux like DLS in some way

    test-0086.c - a simplified variant of test-0084.c that is closer to reality

    test-0087.c - alternation of test-0086.c where the list head is placed at
                  zero offset within each node (surprisingly it causes the
                  analysis to be much more difficult as the pointer-plus
                  operation vanishes when the offset is zero)

                - plots heap graphs of Linux like DLS destruction in progress

    test-0088.c - the core problem from test-0087.c narrowed down to a minimal
                  example

    test-0089.c - regression test focused on off-values, address aliasing, etc.

    test-0096.c - tiny modification of test-0087 that operates on infinite list

    test-0097.c - Linux like doubly-linked lists nested into plain SLS
                - only abstraction here, no concretization

    test-0098.c - alternation of test-0097 with two independent nested lists

    test-0099.c - extension of test-0097, added two-level list destruction
                  (implies concretization at both levels)

    test-0100.c - Linux DLS with nested Linux DLSs, all properly destroyed

    test-0101.c - Linux SLS with nested Linux DLSs, all properly destroyed

    test-0103.c - alternation of test-0101 with some additional concretization
                - regression test focused on handling of segment Neq predicates
                - some hidden memory leaks in there

    test-0104.c - Linux DLS with nested _empty_ Linux DLLs
                - a simplification of test-0100, which has been, surprisingly,
                  harder to analyse for us

    test-0105.c - Linux DLS with nested 0+ Linux DLS
                - a bit time consuming test-case for now
                - we should probably handle cases like this one somehow more
                  generically

    test-0107.c - Linux DLS with nested Linux DLLs consisting of _one_ item only
                - an extension of test-0104, which was even harder to deal with

    test-0108.c - Linux SLS with nested Linux DLLs consisting of _two_ items

    test-0109.c - Linux DLS with nested Linux DLLs consisting of _two_ items

    test-0115.c - non-deterministic variant of test-0123

    test-0120.c - Linux "list" of length one, based on hlist_head/hlist_node

    test-0121.c - alternation of test-0097
                - once used as demo in slides about symdiscover
                - we needed something that is easy to plot
                - abstraction is triggerred only with SE_COST2_LEN_THR == 2

    test-0122.c - the most trivial case of Linux DLS abstraction
                - once used as demo in slides about symdiscover

    test-0123.c - Linux DLS with zero or one nested items in each node

    test-0125.c - a more generic variant of test-0115

    test-0132.c - example of creating, adding, deleting, and traversing the list
                - contributed by Kulesh Shanmugasundaram

    test-0133.c - Insert-Sort implementation operating on Linux DLLs

    test-0134.c - alternation of test-0133

    test-0135.c - Bubble-Sort implementation operating on Linux DLLs

    test-0136.c - optimized variant of test-0135

    test-0138.c - test-0135 extended by invalid free (forgot to use list_entry)

    test-0139.c - traversal of two nodes length Linux DLL

    test-0140.c - traversal of two nodes length Linux DLL
                - spurious memory leak caused by the destructor which expects
                  exactly two nodes

    test-0150.c - regression test focused on gl variables and integral constants

    test-0151.c - regression test focused on gl variables, integral constants,
                  and recursive function calls

    test-0152.c - same as test-0151, but uses a static array of list heads

    test-0153.c - out-of-range access to array (otherwise equal to test-0152.c)

    test-0156.c - alternation of test-0121

    test-0179.c - test-0136 extended by explicit checks of certain shape props

    test-0180.c - test-0179 with an injected programming mistake

    test-0222.c - misuse of list_add(), suggested by Vadim Mutilin

    test-0223.c - test-0222 using a list_add() wrapper with an explicit check

    test-0224.c - error-free variant of test-0223 (the error is unreachable)


Uniform blocks
==============

    test-0212.c - playing with C-level polymorphism

    test-0213.c - tiny modification of test-0212 that causes us problems


Show-case
=========
- Do we have any competitor in case of these examples?

    test-0037.c - glibc claims there is "double free or corruption"
                - valgrind says:
                    Conditional jump or move depends on uninitialised value(s)
                       at 0x4005DA: main (test-0037.c:28)

                    Invalid free() / delete / delete[]
                       at 0x4A07100: free (vg_replace_malloc.c:366)
                       by 0x4005F3: main (test-0037.c:31)
                    Address 0x4c4a040 is 0 bytes inside a block of size 8 free'd
                       at 0x4A07100: free (vg_replace_malloc.c:366)
                       by 0x4005E7: main (test-0037.c:29)

                - Predator says:
                    test-0037.c:27:11: error: type of the pointer being
                    dereferenced does not match type of the target object

                    test-0037.c:31:13: error: double free() detected
                    test-0037.c:19:24: warning: killing junk
                    test-0037.c:19:24: warning: killing junk
                    test-0037.c:19:24: warning: killing junk

    test-0077.c - stack smashing detection:
                    test-0077.c:46:18: error: dereference of unknown value
                    test-0077.c:48:18: error: dereference of unknown value

    test-0102.c - a Linux DLS with two nested independent Linux DLSs
                - while destroying the whole data structure, we forgot
                  to destroy one of the sub-lits

                - Predator shows us where the call of a destructor belongs:

                    test-0102.c:84:13: warning: killing junk
                    test-0102.c:148:16: note: from call of destroy_top()
                    test-0102.c:141:5: note: from call of main()

    test-0131.c - combination of test-0037 and test-0073

    test-0137.c - successfully caught misuse of list_for_each() from Linux
                - contributed by Tomas Vojnar


Call cache
==========
    test-0041.c - infinite recursion
                - the analysis survives fairly well
                - the result is however not much useful

    test-0042.c - regression test focused on call cache
                - inspired by an already fixed bug there

    test-0043.c - regression test focused on call cache
                - inspired by an already fixed bug there
                - the comments inside are valid only with SE_DISABLE_SYMCUT
                - with symcut enabled, we have even more cache hits!

    test-0186.c - regression test focused on a fixed bug in gl vars optimization

    test-0187.c - test-0186 narrowed down to a minimal example

    test-0189.c - regression test focused on a fixed bug in gl vars optimization

    test-0190.c - test-0189 narrowed down to a minimal example

    test-0244.c - cyclic dependency of gl var initializers


Tests taken from Forester
=========================
- originally written by Jiri Simacek

    test-0500.c - cyclic DLL containing no useful data
                - originally taken from fa/data/cdll.c

    test-0501.c - random node insertion into a NULL-terminated DLL
                - originally taken from fa/data/dll-insert.c

    test-0502.c - Insert-Sort operating on NULL-terminated DLL
                - originally taken from fa/data/dll-insertsort.c

    test-0503.c - alternation of test-0502 which is easier to analyze
                - originally taken from fa/data/dll-insertsort_v2.c

    test-0504.c - NULL-terminated DLL at the top level
                - each node contains a nested (possibly empty) cyclic DLL
                - originally taken from fa/data/dll-listofclists.c

    test-0505.c - reversion of a NULL-terminated DLL
                - originally taken from fa/data/dll-rev.c

    test-0506.c - NULL-terminated SLL of length equal to 2n
                - not supported by Predator since it breaks the SLS abstraction
                - luckily, this one is kinda theoretical
                - originally taken from fa/data/listeven.c

    test-0507.c - NULL-terminated SLL of length equal to 2
                - Predator reports junk unless SE_COST_OF_SEG_INTRODUCTION == 2
                - originally taken from fa/data/listref.c

    test-0508.c - Bubble-Sort operating on NULL-terminated SLL
                - originally taken from fa/data/sll-bubblesort.c

    test-0509.c - random node deletion from a NULL-terminated SLL
                - originally taken from fa/data/sll-delete.c

    test-0510.c - traversal of a NULL-terminated SLL
                - each node of the SLL contains a pointer to head
                - originally taken from fa/data/sll-headptr.c

    test-0511.c - Insert-Sort operating on NULL-terminated SLL
                - originally taken from fa/data/sll-insertsort.c

    test-0512.c - NULL-terminated SLL at the top level
                - each node contains a nested (possibly empty) cyclic SLL
                - originally taken from fa/data/sll-listofclists.c

    test-0513.c - Merge-Sort operating on two-level SLL
                - originally taken from fa/data/sll-mergesort.c

    test-0514.c - tiny simplification of test-0513 for Predator
                - not needed with SE_ABSTRACT_ON_LOOP_EDGES_ONLY [now default]

    test-0515.c - reversion of a NULL-terminated SLL
                - originally taken from fa/data/sll-rev.c

    test-0516.c - test-0061 once simplified for Forester
                - originally taken from fa/data/test-0061.c

    test-0517.c - test-0080 once simplified for Forester
                - originally taken from fa/data/test-0080.c

    test-0518.c - test-0098 once simplified for Forester
                - originally taken from fa/data/test-0098.c

    test-0519.c - test-0113 once simplified for Forester
                - originally taken from fa/data/test-0113.c
                - known to work with SE_COST1_LEN_THR == 5

    test-0520.c - test-0128 once simplified for Forester
                - originally taken from fa/data/test-0128.c

    test-0521.c - test-0157 once simplified for Forester
                - originally taken from fa/data/test-0124.inline.c


"Hello world!" like examples
============================
    test-0002.c - invalid dereference
                - NULL value
                - an uninitialized value

    test-0003.c - invalid free()
                - uninitialized value
                - non-heap object
                - double free

    test-0004.c - infinite loop, one malloc() and one free() per each iteration
                - the analysis stops, though the program is infinite
                - there is no junk and no memory error possible
                - Predator issues a warning:
                    "end of function main() has not been reached"

    test-0005.c - non-recursive destruction of a SLL that consists of two nodes
                - OOM state is not handled properly and the analysis detects a
                  dereference of NULL value and possible junk as the consequence
                  of it

                - when analysed in "fast" mode, no flaws are detected

    test-0006.c - another variant of two nodes long SLL destruction
                - also reports problems caused by unhandled OOM state
                - silent in "fast" mode

    test-0007.c - indirect function call (trivial case)

    test-0008.c - indirect function call (more realistic case)
                - generic procedure that creates a fixed length SLL and call
                  a destruction routine, using a function pointer given as
                  argument

                - called two times with two different functions given as the
                  argument

                - once the test uses a loop-based SLL destruction routine
                - once the test uses a recursive SLL destruction routine
                - also a bit chatty when OOM errors are analyzed

    test-0009.c - checking of size of allocated memory (the easiest case)
                - based on type information of the pointer
                - as soon as the (void *) pointer is assigned to a type-safe
                  pointer, the size of _target_ type is compared with the size
                  given to malloc() as the argument

                - we support only constant parameters of malloc(), known in the
                  time of program's compilation

                - we don't support arrays at all (nor static, nor dynamic)

    test-0010.c - fixed length SLL creation/destruction
                - no OOM errors here
                - utilizes our garbage collector
                - Predator properly reports the junk, directly at the place
                  where it's introduced, along with full backtrace

    test-0011.c - trivial test-case focused on OOM states handling

    test-0012.c - another test-case for fixed length SLL creation/destruction
                - no OOM errors
                - no junk

    test-0013.c - regression test focused on the garbage collector
                - not fully automatic, some "#if 1" inside
                - mainly for debugging purposes
                - infinite loop properly detected

    test-0014.c - automatic regression test, based on dll.c/test-dll.cc
                - some noise that comes from unsupported handling of strings
                - but the DLL operations itself seem to be analysed properly
                - reports an artificial memory leak caused by the abstraction

    test-0016.c - SLL creation, fixed length on bare metal
                - seen infinite because we abstract out integral values
                - the analysis terminates thanks to the garbage collector
                - no SLS abstraction involved here

    test-0017.c - an alternation of test-0016.c
                - seen infinite because we abstract out integral values
                - the analysis terminates thanks to finite number of states
                - garbage collector not utilized here

    test-0018.c - modification of test-0017.c
                - explicit destruction replaced by assignment of NULL value
                - garbage collector utilized

    test-0019.c - a smoke test for SymHeapCore functionality

    test-0020.c - regression test of reasoning about unknown bool values

    test-0021.c - regression test of reasoning about unknown pointer values

    test-0022.c - a dummy test for symplot

    test-0023.c - show-case of non-deterministic condition handling
                - plots 3 heap graphs:
                    - before the condition
                    - "then" branch
                    - "else" branch

    test-0024.c - another test-case for SLL construction/destruction
                - fixed length (though some SLS may be created)
                - plots some heap graphs

    test-0025.c - a regression test for inconsistency checking (trivial case)

    test-0026.c - alternation of test-0025.c that plots some heap graphs

    test-0027.c - regression test for detection of some errors on call of free()

    test-0028.c - regression test for invalid dereference, etc.

    test-0029.c - error-free variant of test-0028.c (a hard to find error fixed)

    test-0030.c - OOM error detection demo, bad variant of the example

    test-0031.c - OOM error detection demo, good variant of the example

    test-0032.c - a regression test for the garbage collector
                - focused on composite types nesting
                - inspired by an already fixed bug, see 2327f5c for details

    test-0033.c - two levels of doubly-linked lists
                - not many of nodes, some #if 1 inside
                - mostly for debugging purposes
                - intentionally injected a bug into the example

    test-0034.c - a test-case for global variables (only one pointer)

    test-0035.c - a test-case for collecting of global junk

    test-0036.c - a torture test focused on Neq predicates, prover, etc.
                - does not work with SE_DISABLE_THREE_WAY_JOIN == 0

    test-0044.c - a torture test focused on chaining of dereferences

    test-0045.c - a test that checks if Neq predicates are honored by symstate

    test-0046.c - visualization of Neq predicates

    test-0074.c - regression test focused on nested struct offset computation

    test-0090.c - regression test focused on return values leaking memory

    test-0091.c - anonymous union within a struct (minimal example)

    test-0092.c - regression test focused on global variable initializers

    test-0093.c - regression test focused on handling of unions
                - also plots some heap graphs of them

    test-0094.c - regression test focused on named/anonymous struct/unions
                  and handling of function pointers (heap graph available)

    test-0095.c - regression test focused on struct/union nesting

    test-0114.c - hello-world, once used as the most trivial example for symjoin
                  and its insertSegmentClone() based three-way join

    test-0126.c - trivial test-case focused on three-way join of unknown values

    test-0141.c - simplification of test-0103.c (only some offset manipulation)

    test-0142.c - simplification of test-0133.c (only some offset manipulation)

    test-0143.c - test-0032.c reduced to a minimal example while debugging a bug

    test-0147.c - test-0090.c reduced to a minimal example while debugging a bug

    test-0154.c - error-free variant of test-0033

    test-0159.c - off-values handling, delayed killing of pointed variables

    test-0160.c - off-values using NULL as the reference and some reasoning

    test-0166.c - error-free variant of test-0038

    test-0174.c - modification of test-0014 using calloc() and memset()

    test-0185.c - a regression test focused on a fixed SIGSEGV bug in SymProc

    test-0188.c - wrong count of arguments given to printf()

    test-0196.c - a training example for the introduction of VT_RANGE

    test-0197.c - a regression test for execution of memset() on ranges

    test-0198.c - a regression test for reasoning about integral ranges

    test-0201.c - a regression test for alignment of integral ranges

    test-0202.c - a tiny regression test for alignment of integral ranges

    test-0203.c - similar to test-0198, but uses values close to one

    test-0204.c - same as test-0203, but uses values close to minus one

    test-0215.c - test-0214 reduced to a minimal example showing a bug in killer

    test-0238.c - regression test covering a fixed bug in the prover
                - Predator response was unsound when comparing freed pointers
                - contributed by Ondra Lengal

    test-0240.c - test-case once used for debugging of rejoinObj()

    test-0241.c - a regression test for leaking memory pointed by int variables

    test-0242.c - a regression test for joining shifted addresses of NULL

    test-0245.c - a regression test for leaking memory pointed by alloca() obj

    test-0246.c - a regression test for ptr wrap-around generated by gcc -m32

    test-0247.c - a regression test for ptr wrap-around generated by gcc -m32

    test-0248.c - reinterpretation PTR<-->INT of equal size

    test-0249.c - a regression test for scope of automatic variables
                - taken from https://sv-comp.sosy-lab.org/2019/results/sv-benchmarks/c/memsafety-ext3/scopes5_false-valid-deref.c

    test-0250.c - test for reporting leaks at exit() call

    test-0251.c - test for reporting leaks at abort() call

    test-0252.c - test for reporting leaks at exit() call

    test-0253.c - test for reporting correct variables (name vs level)

    test-0254.c - test for reporting leaks at exit() call

    test-0255.c - test for reporting leaks at exit() call

    test-0256.c - a regression test for realloc()

    test-0257.c - a regression test for uninitialized realloc()

    test-0258.c - a regression test for reused memory by realloc()

    test-0259.c - a regression test for memory leaks in realloc()

    test-0260.c - report memory leak if return value of *alloc() is not used

    test-0261.c - avoid memory leak false positive with realloc()

    test-0262.c - internal error while dereferencing a short string literal

    test-0263.c - a test for bitfields
                - based on https://sv-comp.sosy-lab.org/2020/results/sv-benchmarks/c/ldv-memsafety-bitfields/test-bitfields-1-1.c

    test-0264.c - modified test-0263, unsound for gcc plugin

    test-0265.c - a test for bitfields
                - taken from https://sv-comp.sosy-lab.org/2020/results/sv-benchmarks/c/ldv-memsafety-bitfields/test-bitfields-3.1-1.c

    test-0266.c - a regression test for simulation of realloc(ptr, 0)

    test-0267.c - a regression test for realloc of an invalid pointer

    test-0268.c - regression test for emty block before aborted block
                - contributed by Tomas Jasek

Data reinterpretation
=====================

    test-0158.c - memory leak induced by data reinterpretation

    test-0209.c - byte-level access to zero-terminated strings

    test-0210.c - extended version of test-0209.c with explicit assertion checks

    test-0211.c - in-place reversal of a short zero-terminated string
                - works fine with (0 == SE_ALLOW_OFF_RANGES)


